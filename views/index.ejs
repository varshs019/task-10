<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Manager</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .form-container {
            padding: 30px;
            border-bottom: 1px solid #eee;
        }

        .task-form {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .form-group {
            flex: 1;
            min-width: 200px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .tasks-container {
            padding: 30px;
        }

        .task-item {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 15px;
            border-left: 4px solid #667eea;
            transition: all 0.3s ease;
            position: relative;
        }

        .task-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .task-item.completed {
            opacity: 0.7;
            background: #e8f5e8;
            border-left-color: #28a745;
        }

        .task-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .task-checkbox {
            margin-right: 15px;
            transform: scale(1.2);
            cursor: pointer;
        }

        .task-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
            flex: 1;
            margin-right: 15px;
            transition: text-decoration 0.3s ease;
        }

        .task-title.completed {
            text-decoration: line-through;
            color: #666;
        }

        .task-actions {
            display: flex;
            gap: 10px;
        }

        .btn-edit,
        .btn-delete {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .btn-edit {
            background: #ffc107;
            color: #333;
        }

        .btn-edit:hover {
            background: #e0a800;
            transform: scale(1.05);
        }

        .btn-delete {
            background: #dc3545;
            color: white;
        }

        .btn-delete:hover {
            background: #c82333;
            transform: scale(1.05);
        }

        .task-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9rem;
            color: #666;
        }

        .priority-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .priority-urgent {
            background: #dc3545;
            color: white;
        }

        .priority-high {
            background: #fd7e14;
            color: white;
        }

        .priority-low {
            background: #28a745;
            color: white;
        }

        .no-tasks {
            text-align: center;
            padding: 40px;
            color: #666;
            font-size: 1.1rem;
        }

        .alert {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .alert.show {
            transform: translateX(0);
        }

        .alert-success {
            background: #28a745;
        }

        .alert-error {
            background: #dc3545;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 500px;
            position: relative;
        }

        .close {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            color: #666;
        }

        .close:hover {
            color: #333;
        }

        @media (max-width: 768px) {
            .task-form {
                flex-direction: column;
            }
            
            .task-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .task-actions {
                align-self: flex-end;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-tasks"></i> Task Manager</h1>
            <p>Organize your life, one task at a time</p>
        </div>

        <div class="form-container">
            <form class="task-form" id="taskForm">
                <div class="form-group">
                    <label for="taskTitle">Task Title</label>
                    <input type="text" id="taskTitle" name="title" placeholder="Enter task title..." required>
                </div>
                <div class="form-group">
                    <label for="taskPriority">Priority</label>
                    <select id="taskPriority" name="priority">
                        <option value="low">Low</option>
                        <option value="high">High</option>
                        <option value="urgent">Urgent</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>&nbsp;</label>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Add Task
                    </button>
                </div>
            </form>
        </div>

        <div class="tasks-container">
            <% if (typeof error !== 'undefined' && error) { %>
                <div class="error-message" style="background: #f8d7da; color: #721c24; padding: 15px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #f5c6cb;">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Database Error:</strong> <%= error %>
                </div>
            <% } %>
            
            <% if (tasks && tasks.length > 0) { %>
                <% tasks.forEach(task => { %>
                    <div class="task-item <%= task.completed ? 'completed' : '' %>" data-id="<%= task._id %>">
                        <div class="task-header">
                            <div style="display: flex; align-items: center; flex: 1;">
                                <input type="checkbox" 
                                       class="task-checkbox" 
                                       <%= task.completed ? 'checked' : '' %>
                                       onchange="toggleTask('<%= task._id %>', this.checked)">
                                <div class="task-title <%= task.completed ? 'completed' : '' %>">
                                    <%= task.title %>
                                </div>
                            </div>
                            <div class="task-actions">
                                <button class="btn-edit" onclick="editTask('<%= task._id %>', '<%= task.title %>', '<%= task.priority %>')">
                                    <i class="fas fa-pencil-alt"></i>
                                </button>
                                <button class="btn-delete" onclick="deleteTask('<%= task._id %>')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        <div class="task-meta">
                            <span class="priority-badge priority-<%= task.priority %>">
                                <%= task.priority %>
                            </span>
                            <span>Created: <%= new Date(task.createdAt).toLocaleDateString() %></span>
                        </div>
                    </div>
                <% }); %>
            <% } else if (typeof error === 'undefined' || !error) { %>
                <div class="no-tasks">
                    <i class="fas fa-clipboard-list" style="font-size: 3rem; color: #ccc; margin-bottom: 20px;"></i>
                    <p>No tasks yet. Add your first task above!</p>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Edit Task</h2>
            <form id="editForm">
                <div class="form-group">
                    <label for="editTitle">Task Title</label>
                    <input type="text" id="editTitle" name="title" required>
                </div>
                <div class="form-group">
                    <label for="editPriority">Priority</label>
                    <select id="editPriority" name="priority">
                        <option value="low">Low</option>
                        <option value="high">High</option>
                        <option value="urgent">Urgent</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Update Task
                </button>
            </form>
        </div>
    </div>

    <script>
        let currentTaskId = null;

        // Show alert function
        function showAlert(message, type = 'success') {
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            document.body.appendChild(alert);
            
            setTimeout(() => alert.classList.add('show'), 100);
            setTimeout(() => {
                alert.classList.remove('show');
                setTimeout(() => alert.remove(), 300);
            }, 3000);
        }

        // Add task
        document.getElementById('taskForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const title = document.getElementById('taskTitle').value.trim();
            const priority = document.getElementById('taskPriority').value;
            
            if (!title) {
                showAlert('Task title cannot be empty!', 'error');
                return;
            }
            
            try {
                const response = await fetch('/tasks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ title, priority })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert(data.message);
                    document.getElementById('taskForm').reset();
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    showAlert(data.message, 'error');
                }
            } catch (error) {
                showAlert('Error adding task!', 'error');
            }
        });

        // Toggle task completion
        async function toggleTask(id, completed) {
            try {
                const response = await fetch(`/tasks/${id}/toggle`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert(data.message);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    showAlert(data.message, 'error');
                }
            } catch (error) {
                showAlert('Error updating task!', 'error');
            }
        }

        // Edit task
        function editTask(id, title, priority) {
            currentTaskId = id;
            document.getElementById('editTitle').value = title;
            document.getElementById('editPriority').value = priority;
            document.getElementById('editModal').style.display = 'block';
        }

        // Close modal
        function closeModal() {
            document.getElementById('editModal').style.display = 'none';
            currentTaskId = null;
        }

        // Update task
        document.getElementById('editForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const title = document.getElementById('editTitle').value.trim();
            const priority = document.getElementById('editPriority').value;
            
            if (!title) {
                showAlert('Task title cannot be empty!', 'error');
                return;
            }
            
            try {
                const response = await fetch(`/tasks/${currentTaskId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ title, priority })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert(data.message);
                    closeModal();
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    showAlert(data.message, 'error');
                }
            } catch (error) {
                showAlert('Error updating task!', 'error');
            }
        });

        // Delete task
        async function deleteTask(id) {
            if (!confirm('Are you sure you want to delete this task?')) {
                return;
            }
            
            try {
                const response = await fetch(`/tasks/${id}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert(data.message);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    showAlert(data.message, 'error');
                }
            } catch (error) {
                showAlert('Error deleting task!', 'error');
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('editModal');
            if (event.target === modal) {
                closeModal();
            }
        }
    </script>
</body>
</html> 